{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Title\n",
    "Covid-19 Confirmed Case Analysis \n",
    "\n",
    "# Our Mission\n",
    "Coronavirus pandemic has ruined our day to day life. In the first half of the project I have done Analysis on Total Coronovirus Cases and the life of people. Basically I will analyze the relationship between spread of Coronavirus in a country (I have taken India as country) and how happy people are in that country. Other Analysis includes\n",
    " - Relationalship between Total Cases and GDP per capita for a country\n",
    " - Relationalship between Life Expectancy of a person and Total Coronavirus Cases\n",
    " - Relationalship between Social Support and Total Cases \n",
    " \n",
    "I have visualized the data for all the above Analysis and made the conclusion. In the second half of the project I have taken Death Ratio or Death Rates of Coronavirus Cases and compared with World Happiness Report. In this I have analyzed, Is there any relationship between Death Rates and Developed Country or Death Rate and Social Support, etc. At the end I have made conclusion for all the analysis. \n",
    "\n",
    "I used\n",
    " - World Happiness Report (Published on March 2020) \n",
    " - Coronavirus Confirmed Cases (Till 14th July 2020)\n",
    " - Coronavirus Death Cases (Till 14th July 2020)\n",
    "\n",
    "# Author\n",
    "Nooruddin Shaikh"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  Importing Important Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "All the required module are imported\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "print(\"All the required module are imported\") "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Lets import our covid 19 dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Province/State</th>\n",
       "      <th>Country/Region</th>\n",
       "      <th>Lat</th>\n",
       "      <th>Long</th>\n",
       "      <th>1/22/20</th>\n",
       "      <th>1/23/20</th>\n",
       "      <th>1/24/20</th>\n",
       "      <th>1/25/20</th>\n",
       "      <th>1/26/20</th>\n",
       "      <th>1/27/20</th>\n",
       "      <th>...</th>\n",
       "      <th>7/5/20</th>\n",
       "      <th>7/6/20</th>\n",
       "      <th>7/7/20</th>\n",
       "      <th>7/8/20</th>\n",
       "      <th>7/9/20</th>\n",
       "      <th>7/10/20</th>\n",
       "      <th>7/11/20</th>\n",
       "      <th>7/12/20</th>\n",
       "      <th>7/13/20</th>\n",
       "      <th>7/14/20</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>33.93911</td>\n",
       "      <td>67.709953</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>32951</td>\n",
       "      <td>33190</td>\n",
       "      <td>33384</td>\n",
       "      <td>33594</td>\n",
       "      <td>33908</td>\n",
       "      <td>34194</td>\n",
       "      <td>34366</td>\n",
       "      <td>34451</td>\n",
       "      <td>34455</td>\n",
       "      <td>34740</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Albania</td>\n",
       "      <td>41.15330</td>\n",
       "      <td>20.168300</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>2893</td>\n",
       "      <td>2964</td>\n",
       "      <td>3038</td>\n",
       "      <td>3106</td>\n",
       "      <td>3188</td>\n",
       "      <td>3278</td>\n",
       "      <td>3371</td>\n",
       "      <td>3454</td>\n",
       "      <td>3571</td>\n",
       "      <td>3667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Algeria</td>\n",
       "      <td>28.03390</td>\n",
       "      <td>1.659600</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>15941</td>\n",
       "      <td>16404</td>\n",
       "      <td>16879</td>\n",
       "      <td>17348</td>\n",
       "      <td>17808</td>\n",
       "      <td>18242</td>\n",
       "      <td>18712</td>\n",
       "      <td>19195</td>\n",
       "      <td>19689</td>\n",
       "      <td>20216</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Andorra</td>\n",
       "      <td>42.50630</td>\n",
       "      <td>1.521800</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>855</td>\n",
       "      <td>855</td>\n",
       "      <td>855</td>\n",
       "      <td>855</td>\n",
       "      <td>855</td>\n",
       "      <td>855</td>\n",
       "      <td>855</td>\n",
       "      <td>855</td>\n",
       "      <td>858</td>\n",
       "      <td>861</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Angola</td>\n",
       "      <td>-11.20270</td>\n",
       "      <td>17.873900</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>346</td>\n",
       "      <td>346</td>\n",
       "      <td>386</td>\n",
       "      <td>386</td>\n",
       "      <td>396</td>\n",
       "      <td>458</td>\n",
       "      <td>462</td>\n",
       "      <td>506</td>\n",
       "      <td>525</td>\n",
       "      <td>541</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Antigua and Barbuda</td>\n",
       "      <td>17.06080</td>\n",
       "      <td>-61.796400</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>68</td>\n",
       "      <td>70</td>\n",
       "      <td>70</td>\n",
       "      <td>70</td>\n",
       "      <td>73</td>\n",
       "      <td>74</td>\n",
       "      <td>74</td>\n",
       "      <td>74</td>\n",
       "      <td>74</td>\n",
       "      <td>74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Argentina</td>\n",
       "      <td>-38.41610</td>\n",
       "      <td>-63.616700</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>77815</td>\n",
       "      <td>80447</td>\n",
       "      <td>83426</td>\n",
       "      <td>87030</td>\n",
       "      <td>90693</td>\n",
       "      <td>94060</td>\n",
       "      <td>97509</td>\n",
       "      <td>100166</td>\n",
       "      <td>103265</td>\n",
       "      <td>106910</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Armenia</td>\n",
       "      <td>40.06910</td>\n",
       "      <td>45.038200</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>28606</td>\n",
       "      <td>28936</td>\n",
       "      <td>29285</td>\n",
       "      <td>29820</td>\n",
       "      <td>30346</td>\n",
       "      <td>30903</td>\n",
       "      <td>31392</td>\n",
       "      <td>31969</td>\n",
       "      <td>32151</td>\n",
       "      <td>32490</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Australian Capital Territory</td>\n",
       "      <td>Australia</td>\n",
       "      <td>-35.47350</td>\n",
       "      <td>149.012400</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>108</td>\n",
       "      <td>108</td>\n",
       "      <td>111</td>\n",
       "      <td>112</td>\n",
       "      <td>113</td>\n",
       "      <td>113</td>\n",
       "      <td>113</td>\n",
       "      <td>113</td>\n",
       "      <td>113</td>\n",
       "      <td>113</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>New South Wales</td>\n",
       "      <td>Australia</td>\n",
       "      <td>-33.86880</td>\n",
       "      <td>151.209300</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>3429</td>\n",
       "      <td>3433</td>\n",
       "      <td>3440</td>\n",
       "      <td>3453</td>\n",
       "      <td>3467</td>\n",
       "      <td>3474</td>\n",
       "      <td>3478</td>\n",
       "      <td>3492</td>\n",
       "      <td>3505</td>\n",
       "      <td>3517</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows × 179 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Province/State       Country/Region       Lat        Long  \\\n",
       "0                           NaN          Afghanistan  33.93911   67.709953   \n",
       "1                           NaN              Albania  41.15330   20.168300   \n",
       "2                           NaN              Algeria  28.03390    1.659600   \n",
       "3                           NaN              Andorra  42.50630    1.521800   \n",
       "4                           NaN               Angola -11.20270   17.873900   \n",
       "5                           NaN  Antigua and Barbuda  17.06080  -61.796400   \n",
       "6                           NaN            Argentina -38.41610  -63.616700   \n",
       "7                           NaN              Armenia  40.06910   45.038200   \n",
       "8  Australian Capital Territory            Australia -35.47350  149.012400   \n",
       "9               New South Wales            Australia -33.86880  151.209300   \n",
       "\n",
       "   1/22/20  1/23/20  1/24/20  1/25/20  1/26/20  1/27/20  ...  7/5/20  7/6/20  \\\n",
       "0        0        0        0        0        0        0  ...   32951   33190   \n",
       "1        0        0        0        0        0        0  ...    2893    2964   \n",
       "2        0        0        0        0        0        0  ...   15941   16404   \n",
       "3        0        0        0        0        0        0  ...     855     855   \n",
       "4        0        0        0        0        0        0  ...     346     346   \n",
       "5        0        0        0        0        0        0  ...      68      70   \n",
       "6        0        0        0        0        0        0  ...   77815   80447   \n",
       "7        0        0        0        0        0        0  ...   28606   28936   \n",
       "8        0        0        0        0        0        0  ...     108     108   \n",
       "9        0        0        0        0        3        4  ...    3429    3433   \n",
       "\n",
       "   7/7/20  7/8/20  7/9/20  7/10/20  7/11/20  7/12/20  7/13/20  7/14/20  \n",
       "0   33384   33594   33908    34194    34366    34451    34455    34740  \n",
       "1    3038    3106    3188     3278     3371     3454     3571     3667  \n",
       "2   16879   17348   17808    18242    18712    19195    19689    20216  \n",
       "3     855     855     855      855      855      855      858      861  \n",
       "4     386     386     396      458      462      506      525      541  \n",
       "5      70      70      73       74       74       74       74       74  \n",
       "6   83426   87030   90693    94060    97509   100166   103265   106910  \n",
       "7   29285   29820   30346    30903    31392    31969    32151    32490  \n",
       "8     111     112     113      113      113      113      113      113  \n",
       "9    3440    3453    3467     3474     3478     3492     3505     3517  \n",
       "\n",
       "[10 rows x 179 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corona_csv=pd.read_csv(\"Covid 19 Datasets/datasets_time_series_covid_19_confirmed.csv\")\n",
    "corona_csv.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(266, 179)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Printing shape of our dataset (How many rows and columns are present) \n",
    "corona_csv.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Cleaning the data set\n",
    "In this step we will remove the unnecessary columns or rows and clean our dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Province/State</th>\n",
       "      <th>Country/Region</th>\n",
       "      <th>1/22/20</th>\n",
       "      <th>1/23/20</th>\n",
       "      <th>1/24/20</th>\n",
       "      <th>1/25/20</th>\n",
       "      <th>1/26/20</th>\n",
       "      <th>1/27/20</th>\n",
       "      <th>1/28/20</th>\n",
       "      <th>1/29/20</th>\n",
       "      <th>...</th>\n",
       "      <th>7/5/20</th>\n",
       "      <th>7/6/20</th>\n",
       "      <th>7/7/20</th>\n",
       "      <th>7/8/20</th>\n",
       "      <th>7/9/20</th>\n",
       "      <th>7/10/20</th>\n",
       "      <th>7/11/20</th>\n",
       "      <th>7/12/20</th>\n",
       "      <th>7/13/20</th>\n",
       "      <th>7/14/20</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>32951</td>\n",
       "      <td>33190</td>\n",
       "      <td>33384</td>\n",
       "      <td>33594</td>\n",
       "      <td>33908</td>\n",
       "      <td>34194</td>\n",
       "      <td>34366</td>\n",
       "      <td>34451</td>\n",
       "      <td>34455</td>\n",
       "      <td>34740</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Albania</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>2893</td>\n",
       "      <td>2964</td>\n",
       "      <td>3038</td>\n",
       "      <td>3106</td>\n",
       "      <td>3188</td>\n",
       "      <td>3278</td>\n",
       "      <td>3371</td>\n",
       "      <td>3454</td>\n",
       "      <td>3571</td>\n",
       "      <td>3667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Algeria</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>15941</td>\n",
       "      <td>16404</td>\n",
       "      <td>16879</td>\n",
       "      <td>17348</td>\n",
       "      <td>17808</td>\n",
       "      <td>18242</td>\n",
       "      <td>18712</td>\n",
       "      <td>19195</td>\n",
       "      <td>19689</td>\n",
       "      <td>20216</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Andorra</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>855</td>\n",
       "      <td>855</td>\n",
       "      <td>855</td>\n",
       "      <td>855</td>\n",
       "      <td>855</td>\n",
       "      <td>855</td>\n",
       "      <td>855</td>\n",
       "      <td>855</td>\n",
       "      <td>858</td>\n",
       "      <td>861</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Angola</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>346</td>\n",
       "      <td>346</td>\n",
       "      <td>386</td>\n",
       "      <td>386</td>\n",
       "      <td>396</td>\n",
       "      <td>458</td>\n",
       "      <td>462</td>\n",
       "      <td>506</td>\n",
       "      <td>525</td>\n",
       "      <td>541</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Antigua and Barbuda</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>68</td>\n",
       "      <td>70</td>\n",
       "      <td>70</td>\n",
       "      <td>70</td>\n",
       "      <td>73</td>\n",
       "      <td>74</td>\n",
       "      <td>74</td>\n",
       "      <td>74</td>\n",
       "      <td>74</td>\n",
       "      <td>74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Argentina</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>77815</td>\n",
       "      <td>80447</td>\n",
       "      <td>83426</td>\n",
       "      <td>87030</td>\n",
       "      <td>90693</td>\n",
       "      <td>94060</td>\n",
       "      <td>97509</td>\n",
       "      <td>100166</td>\n",
       "      <td>103265</td>\n",
       "      <td>106910</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Armenia</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>28606</td>\n",
       "      <td>28936</td>\n",
       "      <td>29285</td>\n",
       "      <td>29820</td>\n",
       "      <td>30346</td>\n",
       "      <td>30903</td>\n",
       "      <td>31392</td>\n",
       "      <td>31969</td>\n",
       "      <td>32151</td>\n",
       "      <td>32490</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Australian Capital Territory</td>\n",
       "      <td>Australia</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>108</td>\n",
       "      <td>108</td>\n",
       "      <td>111</td>\n",
       "      <td>112</td>\n",
       "      <td>113</td>\n",
       "      <td>113</td>\n",
       "      <td>113</td>\n",
       "      <td>113</td>\n",
       "      <td>113</td>\n",
       "      <td>113</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>New South Wales</td>\n",
       "      <td>Australia</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>3429</td>\n",
       "      <td>3433</td>\n",
       "      <td>3440</td>\n",
       "      <td>3453</td>\n",
       "      <td>3467</td>\n",
       "      <td>3474</td>\n",
       "      <td>3478</td>\n",
       "      <td>3492</td>\n",
       "      <td>3505</td>\n",
       "      <td>3517</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows × 177 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Province/State       Country/Region  1/22/20  1/23/20  \\\n",
       "0                           NaN          Afghanistan        0        0   \n",
       "1                           NaN              Albania        0        0   \n",
       "2                           NaN              Algeria        0        0   \n",
       "3                           NaN              Andorra        0        0   \n",
       "4                           NaN               Angola        0        0   \n",
       "5                           NaN  Antigua and Barbuda        0        0   \n",
       "6                           NaN            Argentina        0        0   \n",
       "7                           NaN              Armenia        0        0   \n",
       "8  Australian Capital Territory            Australia        0        0   \n",
       "9               New South Wales            Australia        0        0   \n",
       "\n",
       "   1/24/20  1/25/20  1/26/20  1/27/20  1/28/20  1/29/20  ...  7/5/20  7/6/20  \\\n",
       "0        0        0        0        0        0        0  ...   32951   33190   \n",
       "1        0        0        0        0        0        0  ...    2893    2964   \n",
       "2        0        0        0        0        0        0  ...   15941   16404   \n",
       "3        0        0        0        0        0        0  ...     855     855   \n",
       "4        0        0        0        0        0        0  ...     346     346   \n",
       "5        0        0        0        0        0        0  ...      68      70   \n",
       "6        0        0        0        0        0        0  ...   77815   80447   \n",
       "7        0        0        0        0        0        0  ...   28606   28936   \n",
       "8        0        0        0        0        0        0  ...     108     108   \n",
       "9        0        0        3        4        4        4  ...    3429    3433   \n",
       "\n",
       "   7/7/20  7/8/20  7/9/20  7/10/20  7/11/20  7/12/20  7/13/20  7/14/20  \n",
       "0   33384   33594   33908    34194    34366    34451    34455    34740  \n",
       "1    3038    3106    3188     3278     3371     3454     3571     3667  \n",
       "2   16879   17348   17808    18242    18712    19195    19689    20216  \n",
       "3     855     855     855      855      855      855      858      861  \n",
       "4     386     386     396      458      462      506      525      541  \n",
       "5      70      70      73       74       74       74       74       74  \n",
       "6   83426   87030   90693    94060    97509   100166   103265   106910  \n",
       "7   29285   29820   30346    30903    31392    31969    32151    32490  \n",
       "8     111     112     113      113      113      113      113      113  \n",
       "9    3440    3453    3467     3474     3478     3492     3505     3517  \n",
       "\n",
       "[10 rows x 177 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corona_csv.drop([\"Lat\",\"Long\"],axis=1,inplace=True)\n",
    "#axis=1 means we are droping column and not row. Inplace means we are changing and saving our dropped database with our orginal dataset\n",
    "corona_csv.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since we don't need Province/ State and Serial Number columns, we can drop it. But let's Add up Country/Region to make it primary row"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1/22/20</th>\n",
       "      <th>1/23/20</th>\n",
       "      <th>1/24/20</th>\n",
       "      <th>1/25/20</th>\n",
       "      <th>1/26/20</th>\n",
       "      <th>1/27/20</th>\n",
       "      <th>1/28/20</th>\n",
       "      <th>1/29/20</th>\n",
       "      <th>1/30/20</th>\n",
       "      <th>1/31/20</th>\n",
       "      <th>...</th>\n",
       "      <th>7/5/20</th>\n",
       "      <th>7/6/20</th>\n",
       "      <th>7/7/20</th>\n",
       "      <th>7/8/20</th>\n",
       "      <th>7/9/20</th>\n",
       "      <th>7/10/20</th>\n",
       "      <th>7/11/20</th>\n",
       "      <th>7/12/20</th>\n",
       "      <th>7/13/20</th>\n",
       "      <th>7/14/20</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Country/Region</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Afghanistan</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>32951</td>\n",
       "      <td>33190</td>\n",
       "      <td>33384</td>\n",
       "      <td>33594</td>\n",
       "      <td>33908</td>\n",
       "      <td>34194</td>\n",
       "      <td>34366</td>\n",
       "      <td>34451</td>\n",
       "      <td>34455</td>\n",
       "      <td>34740</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Albania</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>2893</td>\n",
       "      <td>2964</td>\n",
       "      <td>3038</td>\n",
       "      <td>3106</td>\n",
       "      <td>3188</td>\n",
       "      <td>3278</td>\n",
       "      <td>3371</td>\n",
       "      <td>3454</td>\n",
       "      <td>3571</td>\n",
       "      <td>3667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Algeria</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>15941</td>\n",
       "      <td>16404</td>\n",
       "      <td>16879</td>\n",
       "      <td>17348</td>\n",
       "      <td>17808</td>\n",
       "      <td>18242</td>\n",
       "      <td>18712</td>\n",
       "      <td>19195</td>\n",
       "      <td>19689</td>\n",
       "      <td>20216</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Andorra</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>855</td>\n",
       "      <td>855</td>\n",
       "      <td>855</td>\n",
       "      <td>855</td>\n",
       "      <td>855</td>\n",
       "      <td>855</td>\n",
       "      <td>855</td>\n",
       "      <td>855</td>\n",
       "      <td>858</td>\n",
       "      <td>861</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Angola</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>346</td>\n",
       "      <td>346</td>\n",
       "      <td>386</td>\n",
       "      <td>386</td>\n",
       "      <td>396</td>\n",
       "      <td>458</td>\n",
       "      <td>462</td>\n",
       "      <td>506</td>\n",
       "      <td>525</td>\n",
       "      <td>541</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Antigua and Barbuda</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>68</td>\n",
       "      <td>70</td>\n",
       "      <td>70</td>\n",
       "      <td>70</td>\n",
       "      <td>73</td>\n",
       "      <td>74</td>\n",
       "      <td>74</td>\n",
       "      <td>74</td>\n",
       "      <td>74</td>\n",
       "      <td>74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Argentina</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>77815</td>\n",
       "      <td>80447</td>\n",
       "      <td>83426</td>\n",
       "      <td>87030</td>\n",
       "      <td>90693</td>\n",
       "      <td>94060</td>\n",
       "      <td>97509</td>\n",
       "      <td>100166</td>\n",
       "      <td>103265</td>\n",
       "      <td>106910</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Armenia</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>28606</td>\n",
       "      <td>28936</td>\n",
       "      <td>29285</td>\n",
       "      <td>29820</td>\n",
       "      <td>30346</td>\n",
       "      <td>30903</td>\n",
       "      <td>31392</td>\n",
       "      <td>31969</td>\n",
       "      <td>32151</td>\n",
       "      <td>32490</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Australia</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>...</td>\n",
       "      <td>8583</td>\n",
       "      <td>8755</td>\n",
       "      <td>8886</td>\n",
       "      <td>9056</td>\n",
       "      <td>9374</td>\n",
       "      <td>9553</td>\n",
       "      <td>9797</td>\n",
       "      <td>9980</td>\n",
       "      <td>10251</td>\n",
       "      <td>10487</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Austria</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>18280</td>\n",
       "      <td>18365</td>\n",
       "      <td>18421</td>\n",
       "      <td>18513</td>\n",
       "      <td>18615</td>\n",
       "      <td>18709</td>\n",
       "      <td>18783</td>\n",
       "      <td>18897</td>\n",
       "      <td>18948</td>\n",
       "      <td>19021</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows × 175 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                     1/22/20  1/23/20  1/24/20  1/25/20  1/26/20  1/27/20  \\\n",
       "Country/Region                                                              \n",
       "Afghanistan                0        0        0        0        0        0   \n",
       "Albania                    0        0        0        0        0        0   \n",
       "Algeria                    0        0        0        0        0        0   \n",
       "Andorra                    0        0        0        0        0        0   \n",
       "Angola                     0        0        0        0        0        0   \n",
       "Antigua and Barbuda        0        0        0        0        0        0   \n",
       "Argentina                  0        0        0        0        0        0   \n",
       "Armenia                    0        0        0        0        0        0   \n",
       "Australia                  0        0        0        0        4        5   \n",
       "Austria                    0        0        0        0        0        0   \n",
       "\n",
       "                     1/28/20  1/29/20  1/30/20  1/31/20  ...  7/5/20  7/6/20  \\\n",
       "Country/Region                                           ...                   \n",
       "Afghanistan                0        0        0        0  ...   32951   33190   \n",
       "Albania                    0        0        0        0  ...    2893    2964   \n",
       "Algeria                    0        0        0        0  ...   15941   16404   \n",
       "Andorra                    0        0        0        0  ...     855     855   \n",
       "Angola                     0        0        0        0  ...     346     346   \n",
       "Antigua and Barbuda        0        0        0        0  ...      68      70   \n",
       "Argentina                  0        0        0        0  ...   77815   80447   \n",
       "Armenia                    0        0        0        0  ...   28606   28936   \n",
       "Australia                  5        6        9        9  ...    8583    8755   \n",
       "Austria                    0        0        0        0  ...   18280   18365   \n",
       "\n",
       "                     7/7/20  7/8/20  7/9/20  7/10/20  7/11/20  7/12/20  \\\n",
       "Country/Region                                                           \n",
       "Afghanistan           33384   33594   33908    34194    34366    34451   \n",
       "Albania                3038    3106    3188     3278     3371     3454   \n",
       "Algeria               16879   17348   17808    18242    18712    19195   \n",
       "Andorra                 855     855     855      855      855      855   \n",
       "Angola                  386     386     396      458      462      506   \n",
       "Antigua and Barbuda      70      70      73       74       74       74   \n",
       "Argentina             83426   87030   90693    94060    97509   100166   \n",
       "Armenia               29285   29820   30346    30903    31392    31969   \n",
       "Australia              8886    9056    9374     9553     9797     9980   \n",
       "Austria               18421   18513   18615    18709    18783    18897   \n",
       "\n",
       "                     7/13/20  7/14/20  \n",
       "Country/Region                         \n",
       "Afghanistan            34455    34740  \n",
       "Albania                 3571     3667  \n",
       "Algeria                19689    20216  \n",
       "Andorra                  858      861  \n",
       "Angola                   525      541  \n",
       "Antigua and Barbuda       74       74  \n",
       "Argentina             103265   106910  \n",
       "Armenia                32151    32490  \n",
       "Australia              10251    10487  \n",
       "Austria                18948    19021  \n",
       "\n",
       "[10 rows x 175 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corona_csv_cleaned= corona_csv.groupby(\"Country/Region\").sum()\n",
    "corona_csv_cleaned.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Visualization of our Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's plot the line graph of India, USA and China and see the graph. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x79dba01fa0>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "corona_csv_cleaned.loc[\"India\"].plot() \n",
    "corona_csv_cleaned.loc[\"US\"].plot()\n",
    "corona_csv_cleaned.loc[\"China\"].plot()\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's find out the graph of active victims in past few days for India"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x79db715760>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "corona_csv_cleaned.loc[\"India\"][-5:].plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's plot the differencial plot of India"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x79db8a3a30>"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "corona_csv_cleaned.loc[\"India\"].diff().plot() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Graph of Active Cases for Past Few Days\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "corona_csv_cleaned.loc[\"India\"][-10:].diff().plot()\n",
    "print(\"Graph of Active Cases for Past Few Days\") "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Let’s find out the maximum rate of active case ever recorded in one day"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "29429.0"
      ]
     },
     "execution_count": 212,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corona_csv_cleaned.loc[\"India\"].diff().max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Max number of cases in 24 hours in India:  29429.0\n",
      "Max number of cases in 24 hours in USA:  67417.0\n",
      "Max number of cases in 24 hours in China:  15136.0\n",
      "Max number of cases in 24 hours in Russia:  11656.0\n"
     ]
    }
   ],
   "source": [
    "print(\"Max number of cases in 24 hours in India: \", corona_csv_cleaned.loc[\"India\"].diff().max())\n",
    "print(\"Max number of cases in 24 hours in USA: \", corona_csv_cleaned.loc[\"US\"].diff().max()) \n",
    "print(\"Max number of cases in 24 hours in China: \", corona_csv_cleaned.loc[\"China\"].diff().max()) \n",
    "print(\"Max number of cases in 24 hours in Russia: \", corona_csv_cleaned.loc[\"Russia\"].diff().max()) \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Now let's calculate maximum rate of active case for each country and then make a column at the end and list there "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's first calculate maximum active cases rate for each country"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[915.0,\n",
       " 117.0,\n",
       " 527.0,\n",
       " 79.0,\n",
       " 62.0,\n",
       " 39.0,\n",
       " 3663.0,\n",
       " 771.0,\n",
       " 497.0,\n",
       " 1321.0,\n",
       " 590.0,\n",
       " 7.0,\n",
       " 786.0,\n",
       " 4019.0,\n",
       " 12.0,\n",
       " 973.0,\n",
       " 2454.0,\n",
       " 7.0,\n",
       " 115.0,\n",
       " 11.0,\n",
       " 1635.0,\n",
       " 496.0,\n",
       " 85.0,\n",
       " 54771.0,\n",
       " 26.0,\n",
       " 330.0,\n",
       " 41.0,\n",
       " 24.0,\n",
       " 78.0,\n",
       " 81.0,\n",
       " 31.0,\n",
       " 2324.0,\n",
       " 2778.0,\n",
       " 216.0,\n",
       " 83.0,\n",
       " 36179.0,\n",
       " 15136.0,\n",
       " 7335.0,\n",
       " 44.0,\n",
       " 295.0,\n",
       " 414.0,\n",
       " 649.0,\n",
       " 430.0,\n",
       " 140.0,\n",
       " 74.0,\n",
       " 58.0,\n",
       " 381.0,\n",
       " 391.0,\n",
       " 99.0,\n",
       " 280.0,\n",
       " 5.0,\n",
       " 1418.0,\n",
       " 11536.0,\n",
       " 1774.0,\n",
       " 325.0,\n",
       " 1070.0,\n",
       " 31.0,\n",
       " 134.0,\n",
       " 82.0,\n",
       " 928.0,\n",
       " 5.0,\n",
       " 267.0,\n",
       " 26849.0,\n",
       " 570.0,\n",
       " 6.0,\n",
       " 42.0,\n",
       " 6933.0,\n",
       " 1254.0,\n",
       " 156.0,\n",
       " 6.0,\n",
       " 1247.0,\n",
       " 278.0,\n",
       " 156.0,\n",
       " 21.0,\n",
       " 332.0,\n",
       " 3.0,\n",
       " 1075.0,\n",
       " 210.0,\n",
       " 99.0,\n",
       " 29429.0,\n",
       " 2657.0,\n",
       " 3574.0,\n",
       " 2848.0,\n",
       " 1515.0,\n",
       " 1962.0,\n",
       " 6557.0,\n",
       " 52.0,\n",
       " 701.0,\n",
       " 40.0,\n",
       " 18757.0,\n",
       " 497.0,\n",
       " 851.0,\n",
       " 683.0,\n",
       " 1073.0,\n",
       " 764.0,\n",
       " 3.0,\n",
       " 48.0,\n",
       " 166.0,\n",
       " 50.0,\n",
       " 45.0,\n",
       " 86.0,\n",
       " 21.0,\n",
       " 90.0,\n",
       " 234.0,\n",
       " 7.0,\n",
       " 435.0,\n",
       " 192.0,\n",
       " 277.0,\n",
       " 190.0,\n",
       " 81.0,\n",
       " 52.0,\n",
       " 227.0,\n",
       " 41.0,\n",
       " 7280.0,\n",
       " 478.0,\n",
       " 12.0,\n",
       " 56.0,\n",
       " 145.0,\n",
       " 563.0,\n",
       " 62.0,\n",
       " 117.0,\n",
       " 740.0,\n",
       " 1346.0,\n",
       " 89.0,\n",
       " 480.0,\n",
       " 69.0,\n",
       " 790.0,\n",
       " 205.0,\n",
       " 386.0,\n",
       " 2164.0,\n",
       " 12073.0,\n",
       " 1540.0,\n",
       " 5.0,\n",
       " 231.0,\n",
       " 8987.0,\n",
       " 2486.0,\n",
       " 599.0,\n",
       " 1516.0,\n",
       " 2355.0,\n",
       " 698.0,\n",
       " 11656.0,\n",
       " 101.0,\n",
       " 5.0,\n",
       " 6.0,\n",
       " 7.0,\n",
       " 54.0,\n",
       " 151.0,\n",
       " 4919.0,\n",
       " 177.0,\n",
       " 445.0,\n",
       " 50.0,\n",
       " 86.0,\n",
       " 1426.0,\n",
       " 114.0,\n",
       " 70.0,\n",
       " 97.0,\n",
       " 13674.0,\n",
       " 323.0,\n",
       " 9630.0,\n",
       " 300.0,\n",
       " 410.0,\n",
       " 78.0,\n",
       " 2530.0,\n",
       " 1321.0,\n",
       " 23.0,\n",
       " 27.0,\n",
       " 211.0,\n",
       " 181.0,\n",
       " 188.0,\n",
       " 10.0,\n",
       " 35.0,\n",
       " 40.0,\n",
       " 82.0,\n",
       " 5138.0,\n",
       " 67417.0,\n",
       " 84.0,\n",
       " 1121.0,\n",
       " 994.0,\n",
       " 5505.0,\n",
       " 36.0,\n",
       " 594.0,\n",
       " 431.0,\n",
       " 24.0,\n",
       " 501.0,\n",
       " 4.0,\n",
       " 116.0,\n",
       " 263.0,\n",
       " 98.0]"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "countries= list(corona_csv_cleaned.index)\n",
    "max_rate= [] \n",
    "for c in countries :\n",
    "    max_rate.append(corona_csv_cleaned.loc[c].diff().max())\n",
    "max_rate"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's add our Maximum Rate columns in our dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1/22/20</th>\n",
       "      <th>1/23/20</th>\n",
       "      <th>1/24/20</th>\n",
       "      <th>1/25/20</th>\n",
       "      <th>1/26/20</th>\n",
       "      <th>1/27/20</th>\n",
       "      <th>1/28/20</th>\n",
       "      <th>1/29/20</th>\n",
       "      <th>1/30/20</th>\n",
       "      <th>1/31/20</th>\n",
       "      <th>...</th>\n",
       "      <th>7/6/20</th>\n",
       "      <th>7/7/20</th>\n",
       "      <th>7/8/20</th>\n",
       "      <th>7/9/20</th>\n",
       "      <th>7/10/20</th>\n",
       "      <th>7/11/20</th>\n",
       "      <th>7/12/20</th>\n",
       "      <th>7/13/20</th>\n",
       "      <th>7/14/20</th>\n",
       "      <th>Rate of Maximum Active Cases</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Country/Region</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Afghanistan</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>33190</td>\n",
       "      <td>33384</td>\n",
       "      <td>33594</td>\n",
       "      <td>33908</td>\n",
       "      <td>34194</td>\n",
       "      <td>34366</td>\n",
       "      <td>34451</td>\n",
       "      <td>34455</td>\n",
       "      <td>34740</td>\n",
       "      <td>915.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Albania</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>2964</td>\n",
       "      <td>3038</td>\n",
       "      <td>3106</td>\n",
       "      <td>3188</td>\n",
       "      <td>3278</td>\n",
       "      <td>3371</td>\n",
       "      <td>3454</td>\n",
       "      <td>3571</td>\n",
       "      <td>3667</td>\n",
       "      <td>117.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Algeria</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>16404</td>\n",
       "      <td>16879</td>\n",
       "      <td>17348</td>\n",
       "      <td>17808</td>\n",
       "      <td>18242</td>\n",
       "      <td>18712</td>\n",
       "      <td>19195</td>\n",
       "      <td>19689</td>\n",
       "      <td>20216</td>\n",
       "      <td>527.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Andorra</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>855</td>\n",
       "      <td>855</td>\n",
       "      <td>855</td>\n",
       "      <td>855</td>\n",
       "      <td>855</td>\n",
       "      <td>855</td>\n",
       "      <td>855</td>\n",
       "      <td>858</td>\n",
       "      <td>861</td>\n",
       "      <td>79.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Angola</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>346</td>\n",
       "      <td>386</td>\n",
       "      <td>386</td>\n",
       "      <td>396</td>\n",
       "      <td>458</td>\n",
       "      <td>462</td>\n",
       "      <td>506</td>\n",
       "      <td>525</td>\n",
       "      <td>541</td>\n",
       "      <td>62.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Antigua and Barbuda</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>70</td>\n",
       "      <td>70</td>\n",
       "      <td>70</td>\n",
       "      <td>73</td>\n",
       "      <td>74</td>\n",
       "      <td>74</td>\n",
       "      <td>74</td>\n",
       "      <td>74</td>\n",
       "      <td>74</td>\n",
       "      <td>39.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Argentina</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>80447</td>\n",
       "      <td>83426</td>\n",
       "      <td>87030</td>\n",
       "      <td>90693</td>\n",
       "      <td>94060</td>\n",
       "      <td>97509</td>\n",
       "      <td>100166</td>\n",
       "      <td>103265</td>\n",
       "      <td>106910</td>\n",
       "      <td>3663.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Armenia</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>28936</td>\n",
       "      <td>29285</td>\n",
       "      <td>29820</td>\n",
       "      <td>30346</td>\n",
       "      <td>30903</td>\n",
       "      <td>31392</td>\n",
       "      <td>31969</td>\n",
       "      <td>32151</td>\n",
       "      <td>32490</td>\n",
       "      <td>771.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Australia</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>...</td>\n",
       "      <td>8755</td>\n",
       "      <td>8886</td>\n",
       "      <td>9056</td>\n",
       "      <td>9374</td>\n",
       "      <td>9553</td>\n",
       "      <td>9797</td>\n",
       "      <td>9980</td>\n",
       "      <td>10251</td>\n",
       "      <td>10487</td>\n",
       "      <td>497.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Austria</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>18365</td>\n",
       "      <td>18421</td>\n",
       "      <td>18513</td>\n",
       "      <td>18615</td>\n",
       "      <td>18709</td>\n",
       "      <td>18783</td>\n",
       "      <td>18897</td>\n",
       "      <td>18948</td>\n",
       "      <td>19021</td>\n",
       "      <td>1321.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows × 176 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                     1/22/20  1/23/20  1/24/20  1/25/20  1/26/20  1/27/20  \\\n",
       "Country/Region                                                              \n",
       "Afghanistan                0        0        0        0        0        0   \n",
       "Albania                    0        0        0        0        0        0   \n",
       "Algeria                    0        0        0        0        0        0   \n",
       "Andorra                    0        0        0        0        0        0   \n",
       "Angola                     0        0        0        0        0        0   \n",
       "Antigua and Barbuda        0        0        0        0        0        0   \n",
       "Argentina                  0        0        0        0        0        0   \n",
       "Armenia                    0        0        0        0        0        0   \n",
       "Australia                  0        0        0        0        4        5   \n",
       "Austria                    0        0        0        0        0        0   \n",
       "\n",
       "                     1/28/20  1/29/20  1/30/20  1/31/20  ...  7/6/20  7/7/20  \\\n",
       "Country/Region                                           ...                   \n",
       "Afghanistan                0        0        0        0  ...   33190   33384   \n",
       "Albania                    0        0        0        0  ...    2964    3038   \n",
       "Algeria                    0        0        0        0  ...   16404   16879   \n",
       "Andorra                    0        0        0        0  ...     855     855   \n",
       "Angola                     0        0        0        0  ...     346     386   \n",
       "Antigua and Barbuda        0        0        0        0  ...      70      70   \n",
       "Argentina                  0        0        0        0  ...   80447   83426   \n",
       "Armenia                    0        0        0        0  ...   28936   29285   \n",
       "Australia                  5        6        9        9  ...    8755    8886   \n",
       "Austria                    0        0        0        0  ...   18365   18421   \n",
       "\n",
       "                     7/8/20  7/9/20  7/10/20  7/11/20  7/12/20  7/13/20  \\\n",
       "Country/Region                                                            \n",
       "Afghanistan           33594   33908    34194    34366    34451    34455   \n",
       "Albania                3106    3188     3278     3371     3454     3571   \n",
       "Algeria               17348   17808    18242    18712    19195    19689   \n",
       "Andorra                 855     855      855      855      855      858   \n",
       "Angola                  386     396      458      462      506      525   \n",
       "Antigua and Barbuda      70      73       74       74       74       74   \n",
       "Argentina             87030   90693    94060    97509   100166   103265   \n",
       "Armenia               29820   30346    30903    31392    31969    32151   \n",
       "Australia              9056    9374     9553     9797     9980    10251   \n",
       "Austria               18513   18615    18709    18783    18897    18948   \n",
       "\n",
       "                     7/14/20  Rate of Maximum Active Cases  \n",
       "Country/Region                                              \n",
       "Afghanistan            34740                         915.0  \n",
       "Albania                 3667                         117.0  \n",
       "Algeria                20216                         527.0  \n",
       "Andorra                  861                          79.0  \n",
       "Angola                   541                          62.0  \n",
       "Antigua and Barbuda       74                          39.0  \n",
       "Argentina             106910                        3663.0  \n",
       "Armenia                32490                         771.0  \n",
       "Australia              10487                         497.0  \n",
       "Austria                19021                        1321.0  \n",
       "\n",
       "[10 rows x 176 columns]"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corona_csv_cleaned[\"Rate of Maximum Active Cases\"] = max_rate\n",
    "corona_csv_cleaned.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### For better Visualization, we will create a new dataset which will only contain \"Country\" and \"Rate of Maximum Active Cases\" column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Rate of Maximum Active Cases</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Country/Region</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Afghanistan</th>\n",
       "      <td>915.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Albania</th>\n",
       "      <td>117.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Algeria</th>\n",
       "      <td>527.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Andorra</th>\n",
       "      <td>79.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Angola</th>\n",
       "      <td>62.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Antigua and Barbuda</th>\n",
       "      <td>39.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Argentina</th>\n",
       "      <td>3663.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Armenia</th>\n",
       "      <td>771.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Australia</th>\n",
       "      <td>497.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Austria</th>\n",
       "      <td>1321.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     Rate of Maximum Active Cases\n",
       "Country/Region                                   \n",
       "Afghanistan                                 915.0\n",
       "Albania                                     117.0\n",
       "Algeria                                     527.0\n",
       "Andorra                                      79.0\n",
       "Angola                                       62.0\n",
       "Antigua and Barbuda                          39.0\n",
       "Argentina                                  3663.0\n",
       "Armenia                                     771.0\n",
       "Australia                                   497.0\n",
       "Austria                                    1321.0"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corona_new=pd.DataFrame(corona_csv_cleaned[\"Rate of Maximum Active Cases\"]) \n",
    "corona_new.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Cool, Now let's use \"World Happiness Report\" or \"WHR\" and merge the analysis to find out some useful insights. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's import whr report"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country name</th>\n",
       "      <th>Regional indicator</th>\n",
       "      <th>Ladder score</th>\n",
       "      <th>Standard error of ladder score</th>\n",
       "      <th>upperwhisker</th>\n",
       "      <th>lowerwhisker</th>\n",
       "      <th>Logged GDP per capita</th>\n",
       "      <th>Social support</th>\n",
       "      <th>Healthy life expectancy</th>\n",
       "      <th>Freedom to make life choices</th>\n",
       "      <th>Generosity</th>\n",
       "      <th>Perceptions of corruption</th>\n",
       "      <th>Ladder score in Dystopia</th>\n",
       "      <th>Explained by: Log GDP per capita</th>\n",
       "      <th>Explained by: Social support</th>\n",
       "      <th>Explained by: Healthy life expectancy</th>\n",
       "      <th>Explained by: Freedom to make life choices</th>\n",
       "      <th>Explained by: Generosity</th>\n",
       "      <th>Explained by: Perceptions of corruption</th>\n",
       "      <th>Dystopia + residual</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Finland</td>\n",
       "      <td>Western Europe</td>\n",
       "      <td>7.8087</td>\n",
       "      <td>0.031156</td>\n",
       "      <td>7.869766</td>\n",
       "      <td>7.747634</td>\n",
       "      <td>10.639267</td>\n",
       "      <td>0.954330</td>\n",
       "      <td>71.900825</td>\n",
       "      <td>0.949172</td>\n",
       "      <td>-0.059482</td>\n",
       "      <td>0.195445</td>\n",
       "      <td>1.972317</td>\n",
       "      <td>1.285190</td>\n",
       "      <td>1.499526</td>\n",
       "      <td>0.961271</td>\n",
       "      <td>0.662317</td>\n",
       "      <td>0.159670</td>\n",
       "      <td>0.477857</td>\n",
       "      <td>2.762835</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Denmark</td>\n",
       "      <td>Western Europe</td>\n",
       "      <td>7.6456</td>\n",
       "      <td>0.033492</td>\n",
       "      <td>7.711245</td>\n",
       "      <td>7.579955</td>\n",
       "      <td>10.774001</td>\n",
       "      <td>0.955991</td>\n",
       "      <td>72.402504</td>\n",
       "      <td>0.951444</td>\n",
       "      <td>0.066202</td>\n",
       "      <td>0.168489</td>\n",
       "      <td>1.972317</td>\n",
       "      <td>1.326949</td>\n",
       "      <td>1.503449</td>\n",
       "      <td>0.979333</td>\n",
       "      <td>0.665040</td>\n",
       "      <td>0.242793</td>\n",
       "      <td>0.495260</td>\n",
       "      <td>2.432741</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Switzerland</td>\n",
       "      <td>Western Europe</td>\n",
       "      <td>7.5599</td>\n",
       "      <td>0.035014</td>\n",
       "      <td>7.628528</td>\n",
       "      <td>7.491272</td>\n",
       "      <td>10.979933</td>\n",
       "      <td>0.942847</td>\n",
       "      <td>74.102448</td>\n",
       "      <td>0.921337</td>\n",
       "      <td>0.105911</td>\n",
       "      <td>0.303728</td>\n",
       "      <td>1.972317</td>\n",
       "      <td>1.390774</td>\n",
       "      <td>1.472403</td>\n",
       "      <td>1.040533</td>\n",
       "      <td>0.628954</td>\n",
       "      <td>0.269056</td>\n",
       "      <td>0.407946</td>\n",
       "      <td>2.350267</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Iceland</td>\n",
       "      <td>Western Europe</td>\n",
       "      <td>7.5045</td>\n",
       "      <td>0.059616</td>\n",
       "      <td>7.621347</td>\n",
       "      <td>7.387653</td>\n",
       "      <td>10.772559</td>\n",
       "      <td>0.974670</td>\n",
       "      <td>73.000000</td>\n",
       "      <td>0.948892</td>\n",
       "      <td>0.246944</td>\n",
       "      <td>0.711710</td>\n",
       "      <td>1.972317</td>\n",
       "      <td>1.326502</td>\n",
       "      <td>1.547567</td>\n",
       "      <td>1.000843</td>\n",
       "      <td>0.661981</td>\n",
       "      <td>0.362330</td>\n",
       "      <td>0.144541</td>\n",
       "      <td>2.460688</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Norway</td>\n",
       "      <td>Western Europe</td>\n",
       "      <td>7.4880</td>\n",
       "      <td>0.034837</td>\n",
       "      <td>7.556281</td>\n",
       "      <td>7.419719</td>\n",
       "      <td>11.087804</td>\n",
       "      <td>0.952487</td>\n",
       "      <td>73.200783</td>\n",
       "      <td>0.955750</td>\n",
       "      <td>0.134533</td>\n",
       "      <td>0.263218</td>\n",
       "      <td>1.972317</td>\n",
       "      <td>1.424207</td>\n",
       "      <td>1.495173</td>\n",
       "      <td>1.008072</td>\n",
       "      <td>0.670201</td>\n",
       "      <td>0.287985</td>\n",
       "      <td>0.434101</td>\n",
       "      <td>2.168266</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Netherlands</td>\n",
       "      <td>Western Europe</td>\n",
       "      <td>7.4489</td>\n",
       "      <td>0.027792</td>\n",
       "      <td>7.503372</td>\n",
       "      <td>7.394428</td>\n",
       "      <td>10.812712</td>\n",
       "      <td>0.939139</td>\n",
       "      <td>72.300919</td>\n",
       "      <td>0.908548</td>\n",
       "      <td>0.207612</td>\n",
       "      <td>0.364717</td>\n",
       "      <td>1.972317</td>\n",
       "      <td>1.338946</td>\n",
       "      <td>1.463646</td>\n",
       "      <td>0.975675</td>\n",
       "      <td>0.613626</td>\n",
       "      <td>0.336318</td>\n",
       "      <td>0.368570</td>\n",
       "      <td>2.352117</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Sweden</td>\n",
       "      <td>Western Europe</td>\n",
       "      <td>7.3535</td>\n",
       "      <td>0.036234</td>\n",
       "      <td>7.424519</td>\n",
       "      <td>7.282481</td>\n",
       "      <td>10.758794</td>\n",
       "      <td>0.926311</td>\n",
       "      <td>72.600769</td>\n",
       "      <td>0.939144</td>\n",
       "      <td>0.111615</td>\n",
       "      <td>0.250880</td>\n",
       "      <td>1.972317</td>\n",
       "      <td>1.322235</td>\n",
       "      <td>1.433348</td>\n",
       "      <td>0.986470</td>\n",
       "      <td>0.650298</td>\n",
       "      <td>0.272828</td>\n",
       "      <td>0.442066</td>\n",
       "      <td>2.246299</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>New Zealand</td>\n",
       "      <td>North America and ANZ</td>\n",
       "      <td>7.2996</td>\n",
       "      <td>0.039465</td>\n",
       "      <td>7.376953</td>\n",
       "      <td>7.222248</td>\n",
       "      <td>10.500943</td>\n",
       "      <td>0.949119</td>\n",
       "      <td>73.202629</td>\n",
       "      <td>0.936217</td>\n",
       "      <td>0.191598</td>\n",
       "      <td>0.221139</td>\n",
       "      <td>1.972317</td>\n",
       "      <td>1.242318</td>\n",
       "      <td>1.487218</td>\n",
       "      <td>1.008138</td>\n",
       "      <td>0.646790</td>\n",
       "      <td>0.325726</td>\n",
       "      <td>0.461268</td>\n",
       "      <td>2.128108</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Austria</td>\n",
       "      <td>Western Europe</td>\n",
       "      <td>7.2942</td>\n",
       "      <td>0.033365</td>\n",
       "      <td>7.359596</td>\n",
       "      <td>7.228804</td>\n",
       "      <td>10.742824</td>\n",
       "      <td>0.928046</td>\n",
       "      <td>73.002502</td>\n",
       "      <td>0.899989</td>\n",
       "      <td>0.085429</td>\n",
       "      <td>0.499955</td>\n",
       "      <td>1.972317</td>\n",
       "      <td>1.317286</td>\n",
       "      <td>1.437445</td>\n",
       "      <td>1.000934</td>\n",
       "      <td>0.603369</td>\n",
       "      <td>0.255510</td>\n",
       "      <td>0.281256</td>\n",
       "      <td>2.398446</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Luxembourg</td>\n",
       "      <td>Western Europe</td>\n",
       "      <td>7.2375</td>\n",
       "      <td>0.030852</td>\n",
       "      <td>7.297970</td>\n",
       "      <td>7.177031</td>\n",
       "      <td>11.450681</td>\n",
       "      <td>0.906912</td>\n",
       "      <td>72.599998</td>\n",
       "      <td>0.905636</td>\n",
       "      <td>-0.004621</td>\n",
       "      <td>0.367084</td>\n",
       "      <td>1.972317</td>\n",
       "      <td>1.536676</td>\n",
       "      <td>1.387528</td>\n",
       "      <td>0.986443</td>\n",
       "      <td>0.610137</td>\n",
       "      <td>0.195954</td>\n",
       "      <td>0.367041</td>\n",
       "      <td>2.153700</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Country name     Regional indicator  Ladder score  \\\n",
       "0      Finland         Western Europe        7.8087   \n",
       "1      Denmark         Western Europe        7.6456   \n",
       "2  Switzerland         Western Europe        7.5599   \n",
       "3      Iceland         Western Europe        7.5045   \n",
       "4       Norway         Western Europe        7.4880   \n",
       "5  Netherlands         Western Europe        7.4489   \n",
       "6       Sweden         Western Europe        7.3535   \n",
       "7  New Zealand  North America and ANZ        7.2996   \n",
       "8      Austria         Western Europe        7.2942   \n",
       "9   Luxembourg         Western Europe        7.2375   \n",
       "\n",
       "   Standard error of ladder score  upperwhisker  lowerwhisker  \\\n",
       "0                        0.031156      7.869766      7.747634   \n",
       "1                        0.033492      7.711245      7.579955   \n",
       "2                        0.035014      7.628528      7.491272   \n",
       "3                        0.059616      7.621347      7.387653   \n",
       "4                        0.034837      7.556281      7.419719   \n",
       "5                        0.027792      7.503372      7.394428   \n",
       "6                        0.036234      7.424519      7.282481   \n",
       "7                        0.039465      7.376953      7.222248   \n",
       "8                        0.033365      7.359596      7.228804   \n",
       "9                        0.030852      7.297970      7.177031   \n",
       "\n",
       "   Logged GDP per capita  Social support  Healthy life expectancy  \\\n",
       "0              10.639267        0.954330                71.900825   \n",
       "1              10.774001        0.955991                72.402504   \n",
       "2              10.979933        0.942847                74.102448   \n",
       "3              10.772559        0.974670                73.000000   \n",
       "4              11.087804        0.952487                73.200783   \n",
       "5              10.812712        0.939139                72.300919   \n",
       "6              10.758794        0.926311                72.600769   \n",
       "7              10.500943        0.949119                73.202629   \n",
       "8              10.742824        0.928046                73.002502   \n",
       "9              11.450681        0.906912                72.599998   \n",
       "\n",
       "   Freedom to make life choices  Generosity  Perceptions of corruption  \\\n",
       "0                      0.949172   -0.059482                   0.195445   \n",
       "1                      0.951444    0.066202                   0.168489   \n",
       "2                      0.921337    0.105911                   0.303728   \n",
       "3                      0.948892    0.246944                   0.711710   \n",
       "4                      0.955750    0.134533                   0.263218   \n",
       "5                      0.908548    0.207612                   0.364717   \n",
       "6                      0.939144    0.111615                   0.250880   \n",
       "7                      0.936217    0.191598                   0.221139   \n",
       "8                      0.899989    0.085429                   0.499955   \n",
       "9                      0.905636   -0.004621                   0.367084   \n",
       "\n",
       "   Ladder score in Dystopia  Explained by: Log GDP per capita  \\\n",
       "0                  1.972317                          1.285190   \n",
       "1                  1.972317                          1.326949   \n",
       "2                  1.972317                          1.390774   \n",
       "3                  1.972317                          1.326502   \n",
       "4                  1.972317                          1.424207   \n",
       "5                  1.972317                          1.338946   \n",
       "6                  1.972317                          1.322235   \n",
       "7                  1.972317                          1.242318   \n",
       "8                  1.972317                          1.317286   \n",
       "9                  1.972317                          1.536676   \n",
       "\n",
       "   Explained by: Social support  Explained by: Healthy life expectancy  \\\n",
       "0                      1.499526                               0.961271   \n",
       "1                      1.503449                               0.979333   \n",
       "2                      1.472403                               1.040533   \n",
       "3                      1.547567                               1.000843   \n",
       "4                      1.495173                               1.008072   \n",
       "5                      1.463646                               0.975675   \n",
       "6                      1.433348                               0.986470   \n",
       "7                      1.487218                               1.008138   \n",
       "8                      1.437445                               1.000934   \n",
       "9                      1.387528                               0.986443   \n",
       "\n",
       "   Explained by: Freedom to make life choices  Explained by: Generosity  \\\n",
       "0                                    0.662317                  0.159670   \n",
       "1                                    0.665040                  0.242793   \n",
       "2                                    0.628954                  0.269056   \n",
       "3                                    0.661981                  0.362330   \n",
       "4                                    0.670201                  0.287985   \n",
       "5                                    0.613626                  0.336318   \n",
       "6                                    0.650298                  0.272828   \n",
       "7                                    0.646790                  0.325726   \n",
       "8                                    0.603369                  0.255510   \n",
       "9                                    0.610137                  0.195954   \n",
       "\n",
       "   Explained by: Perceptions of corruption  Dystopia + residual  \n",
       "0                                 0.477857             2.762835  \n",
       "1                                 0.495260             2.432741  \n",
       "2                                 0.407946             2.350267  \n",
       "3                                 0.144541             2.460688  \n",
       "4                                 0.434101             2.168266  \n",
       "5                                 0.368570             2.352117  \n",
       "6                                 0.442066             2.246299  \n",
       "7                                 0.461268             2.128108  \n",
       "8                                 0.281256             2.398446  \n",
       "9                                 0.367041             2.153700  "
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "whr= pd.read_csv(\"Covid 19 Datasets/datasets_WHR20.csv\") \n",
    "whr.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Again in this datasets, we have some useless columns let's drop them (delete them) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country name</th>\n",
       "      <th>Ladder score</th>\n",
       "      <th>Standard error of ladder score</th>\n",
       "      <th>upperwhisker</th>\n",
       "      <th>lowerwhisker</th>\n",
       "      <th>Logged GDP per capita</th>\n",
       "      <th>Social support</th>\n",
       "      <th>Healthy life expectancy</th>\n",
       "      <th>Freedom to make life choices</th>\n",
       "      <th>Generosity</th>\n",
       "      <th>Perceptions of corruption</th>\n",
       "      <th>Ladder score in Dystopia</th>\n",
       "      <th>Explained by: Log GDP per capita</th>\n",
       "      <th>Explained by: Social support</th>\n",
       "      <th>Explained by: Healthy life expectancy</th>\n",
       "      <th>Explained by: Freedom to make life choices</th>\n",
       "      <th>Explained by: Generosity</th>\n",
       "      <th>Explained by: Perceptions of corruption</th>\n",
       "      <th>Dystopia + residual</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Finland</td>\n",
       "      <td>7.8087</td>\n",
       "      <td>0.031156</td>\n",
       "      <td>7.869766</td>\n",
       "      <td>7.747634</td>\n",
       "      <td>10.639267</td>\n",
       "      <td>0.954330</td>\n",
       "      <td>71.900825</td>\n",
       "      <td>0.949172</td>\n",
       "      <td>-0.059482</td>\n",
       "      <td>0.195445</td>\n",
       "      <td>1.972317</td>\n",
       "      <td>1.285190</td>\n",
       "      <td>1.499526</td>\n",
       "      <td>0.961271</td>\n",
       "      <td>0.662317</td>\n",
       "      <td>0.159670</td>\n",
       "      <td>0.477857</td>\n",
       "      <td>2.762835</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Denmark</td>\n",
       "      <td>7.6456</td>\n",
       "      <td>0.033492</td>\n",
       "      <td>7.711245</td>\n",
       "      <td>7.579955</td>\n",
       "      <td>10.774001</td>\n",
       "      <td>0.955991</td>\n",
       "      <td>72.402504</td>\n",
       "      <td>0.951444</td>\n",
       "      <td>0.066202</td>\n",
       "      <td>0.168489</td>\n",
       "      <td>1.972317</td>\n",
       "      <td>1.326949</td>\n",
       "      <td>1.503449</td>\n",
       "      <td>0.979333</td>\n",
       "      <td>0.665040</td>\n",
       "      <td>0.242793</td>\n",
       "      <td>0.495260</td>\n",
       "      <td>2.432741</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Switzerland</td>\n",
       "      <td>7.5599</td>\n",
       "      <td>0.035014</td>\n",
       "      <td>7.628528</td>\n",
       "      <td>7.491272</td>\n",
       "      <td>10.979933</td>\n",
       "      <td>0.942847</td>\n",
       "      <td>74.102448</td>\n",
       "      <td>0.921337</td>\n",
       "      <td>0.105911</td>\n",
       "      <td>0.303728</td>\n",
       "      <td>1.972317</td>\n",
       "      <td>1.390774</td>\n",
       "      <td>1.472403</td>\n",
       "      <td>1.040533</td>\n",
       "      <td>0.628954</td>\n",
       "      <td>0.269056</td>\n",
       "      <td>0.407946</td>\n",
       "      <td>2.350267</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Iceland</td>\n",
       "      <td>7.5045</td>\n",
       "      <td>0.059616</td>\n",
       "      <td>7.621347</td>\n",
       "      <td>7.387653</td>\n",
       "      <td>10.772559</td>\n",
       "      <td>0.974670</td>\n",
       "      <td>73.000000</td>\n",
       "      <td>0.948892</td>\n",
       "      <td>0.246944</td>\n",
       "      <td>0.711710</td>\n",
       "      <td>1.972317</td>\n",
       "      <td>1.326502</td>\n",
       "      <td>1.547567</td>\n",
       "      <td>1.000843</td>\n",
       "      <td>0.661981</td>\n",
       "      <td>0.362330</td>\n",
       "      <td>0.144541</td>\n",
       "      <td>2.460688</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Norway</td>\n",
       "      <td>7.4880</td>\n",
       "      <td>0.034837</td>\n",
       "      <td>7.556281</td>\n",
       "      <td>7.419719</td>\n",
       "      <td>11.087804</td>\n",
       "      <td>0.952487</td>\n",
       "      <td>73.200783</td>\n",
       "      <td>0.955750</td>\n",
       "      <td>0.134533</td>\n",
       "      <td>0.263218</td>\n",
       "      <td>1.972317</td>\n",
       "      <td>1.424207</td>\n",
       "      <td>1.495173</td>\n",
       "      <td>1.008072</td>\n",
       "      <td>0.670201</td>\n",
       "      <td>0.287985</td>\n",
       "      <td>0.434101</td>\n",
       "      <td>2.168266</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Country name  Ladder score  Standard error of ladder score  upperwhisker  \\\n",
       "0      Finland        7.8087                        0.031156      7.869766   \n",
       "1      Denmark        7.6456                        0.033492      7.711245   \n",
       "2  Switzerland        7.5599                        0.035014      7.628528   \n",
       "3      Iceland        7.5045                        0.059616      7.621347   \n",
       "4       Norway        7.4880                        0.034837      7.556281   \n",
       "\n",
       "   lowerwhisker  Logged GDP per capita  Social support  \\\n",
       "0      7.747634              10.639267        0.954330   \n",
       "1      7.579955              10.774001        0.955991   \n",
       "2      7.491272              10.979933        0.942847   \n",
       "3      7.387653              10.772559        0.974670   \n",
       "4      7.419719              11.087804        0.952487   \n",
       "\n",
       "   Healthy life expectancy  Freedom to make life choices  Generosity  \\\n",
       "0                71.900825                      0.949172   -0.059482   \n",
       "1                72.402504                      0.951444    0.066202   \n",
       "2                74.102448                      0.921337    0.105911   \n",
       "3                73.000000                      0.948892    0.246944   \n",
       "4                73.200783                      0.955750    0.134533   \n",
       "\n",
       "   Perceptions of corruption  Ladder score in Dystopia  \\\n",
       "0                   0.195445                  1.972317   \n",
       "1                   0.168489                  1.972317   \n",
       "2                   0.303728                  1.972317   \n",
       "3                   0.711710                  1.972317   \n",
       "4                   0.263218                  1.972317   \n",
       "\n",
       "   Explained by: Log GDP per capita  Explained by: Social support  \\\n",
       "0                          1.285190                      1.499526   \n",
       "1                          1.326949                      1.503449   \n",
       "2                          1.390774                      1.472403   \n",
       "3                          1.326502                      1.547567   \n",
       "4                          1.424207                      1.495173   \n",
       "\n",
       "   Explained by: Healthy life expectancy  \\\n",
       "0                               0.961271   \n",
       "1                               0.979333   \n",
       "2                               1.040533   \n",
       "3                               1.000843   \n",
       "4                               1.008072   \n",
       "\n",
       "   Explained by: Freedom to make life choices  Explained by: Generosity  \\\n",
       "0                                    0.662317                  0.159670   \n",
       "1                                    0.665040                  0.242793   \n",
       "2                                    0.628954                  0.269056   \n",
       "3                                    0.661981                  0.362330   \n",
       "4                                    0.670201                  0.287985   \n",
       "\n",
       "   Explained by: Perceptions of corruption  Dystopia + residual  \n",
       "0                                 0.477857             2.762835  \n",
       "1                                 0.495260             2.432741  \n",
       "2                                 0.407946             2.350267  \n",
       "3                                 0.144541             2.460688  \n",
       "4                                 0.434101             2.168266  "
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "whr.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country name</th>\n",
       "      <th>Explained by: Log GDP per capita</th>\n",
       "      <th>Explained by: Social support</th>\n",
       "      <th>Explained by: Healthy life expectancy</th>\n",
       "      <th>Explained by: Freedom to make life choices</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Finland</td>\n",
       "      <td>1.285190</td>\n",
       "      <td>1.499526</td>\n",
       "      <td>0.961271</td>\n",
       "      <td>0.662317</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Denmark</td>\n",
       "      <td>1.326949</td>\n",
       "      <td>1.503449</td>\n",
       "      <td>0.979333</td>\n",
       "      <td>0.665040</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Switzerland</td>\n",
       "      <td>1.390774</td>\n",
       "      <td>1.472403</td>\n",
       "      <td>1.040533</td>\n",
       "      <td>0.628954</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Iceland</td>\n",
       "      <td>1.326502</td>\n",
       "      <td>1.547567</td>\n",
       "      <td>1.000843</td>\n",
       "      <td>0.661981</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Norway</td>\n",
       "      <td>1.424207</td>\n",
       "      <td>1.495173</td>\n",
       "      <td>1.008072</td>\n",
       "      <td>0.670201</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Netherlands</td>\n",
       "      <td>1.338946</td>\n",
       "      <td>1.463646</td>\n",
       "      <td>0.975675</td>\n",
       "      <td>0.613626</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Sweden</td>\n",
       "      <td>1.322235</td>\n",
       "      <td>1.433348</td>\n",
       "      <td>0.986470</td>\n",
       "      <td>0.650298</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>New Zealand</td>\n",
       "      <td>1.242318</td>\n",
       "      <td>1.487218</td>\n",
       "      <td>1.008138</td>\n",
       "      <td>0.646790</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Austria</td>\n",
       "      <td>1.317286</td>\n",
       "      <td>1.437445</td>\n",
       "      <td>1.000934</td>\n",
       "      <td>0.603369</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Luxembourg</td>\n",
       "      <td>1.536676</td>\n",
       "      <td>1.387528</td>\n",
       "      <td>0.986443</td>\n",
       "      <td>0.610137</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Country name  Explained by: Log GDP per capita  \\\n",
       "0      Finland                          1.285190   \n",
       "1      Denmark                          1.326949   \n",
       "2  Switzerland                          1.390774   \n",
       "3      Iceland                          1.326502   \n",
       "4       Norway                          1.424207   \n",
       "5  Netherlands                          1.338946   \n",
       "6       Sweden                          1.322235   \n",
       "7  New Zealand                          1.242318   \n",
       "8      Austria                          1.317286   \n",
       "9   Luxembourg                          1.536676   \n",
       "\n",
       "   Explained by: Social support  Explained by: Healthy life expectancy  \\\n",
       "0                      1.499526                               0.961271   \n",
       "1                      1.503449                               0.979333   \n",
       "2                      1.472403                               1.040533   \n",
       "3                      1.547567                               1.000843   \n",
       "4                      1.495173                               1.008072   \n",
       "5                      1.463646                               0.975675   \n",
       "6                      1.433348                               0.986470   \n",
       "7                      1.487218                               1.008138   \n",
       "8                      1.437445                               1.000934   \n",
       "9                      1.387528                               0.986443   \n",
       "\n",
       "   Explained by: Freedom to make life choices  \n",
       "0                                    0.662317  \n",
       "1                                    0.665040  \n",
       "2                                    0.628954  \n",
       "3                                    0.661981  \n",
       "4                                    0.670201  \n",
       "5                                    0.613626  \n",
       "6                                    0.650298  \n",
       "7                                    0.646790  \n",
       "8                                    0.603369  \n",
       "9                                    0.610137  "
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Lets make a new list which contains useless columns snd then delete that list\n",
    "useless= [\"Ladder score\", \"Standard error of ladder score\", \"upperwhisker\", \"lowerwhisker\", \"Logged GDP per capita\", \"Social support\", \"Healthy life expectancy\", \"Freedom to make life choices\", \"Generosity\", \"Perceptions of corruption\", \"Ladder score in Dystopia\", \"Explained by: Generosity\", \"Explained by: Perceptions of corruption\", \"Dystopia + residual\"]\n",
    "whr.drop(useless, axis=1,inplace=True)\n",
    "whr.head(10)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country name</th>\n",
       "      <th>GDP per capita</th>\n",
       "      <th>Social support</th>\n",
       "      <th>Healthy life expectancy</th>\n",
       "      <th>Freedom to make life choices</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Finland</td>\n",
       "      <td>1.285190</td>\n",
       "      <td>1.499526</td>\n",
       "      <td>0.961271</td>\n",
       "      <td>0.662317</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Denmark</td>\n",
       "      <td>1.326949</td>\n",
       "      <td>1.503449</td>\n",
       "      <td>0.979333</td>\n",
       "      <td>0.665040</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Switzerland</td>\n",
       "      <td>1.390774</td>\n",
       "      <td>1.472403</td>\n",
       "      <td>1.040533</td>\n",
       "      <td>0.628954</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Iceland</td>\n",
       "      <td>1.326502</td>\n",
       "      <td>1.547567</td>\n",
       "      <td>1.000843</td>\n",
       "      <td>0.661981</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Norway</td>\n",
       "      <td>1.424207</td>\n",
       "      <td>1.495173</td>\n",
       "      <td>1.008072</td>\n",
       "      <td>0.670201</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Country name  GDP per capita  Social support  Healthy life expectancy  \\\n",
       "0      Finland        1.285190        1.499526                 0.961271   \n",
       "1      Denmark        1.326949        1.503449                 0.979333   \n",
       "2  Switzerland        1.390774        1.472403                 1.040533   \n",
       "3      Iceland        1.326502        1.547567                 1.000843   \n",
       "4       Norway        1.424207        1.495173                 1.008072   \n",
       "\n",
       "   Freedom to make life choices  \n",
       "0                      0.662317  \n",
       "1                      0.665040  \n",
       "2                      0.628954  \n",
       "3                      0.661981  \n",
       "4                      0.670201  "
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Lets renams the index to make is understandable\n",
    "whr.rename(columns= {\"Explained by: Log GDP per capita\" : \"GDP per capita\", \"Explained by: Social support\" : \"Social support\", \"Explained by: Healthy life expectancy\" : \"Healthy life expectancy\", \"Explained by: Freedom to make life choices\" : \"Freedom to make life choices\"}, inplace=True)\n",
    "whr.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Similarly as our previous dataset, let's make Country name as primarily index for this dataset too"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>GDP per capita</th>\n",
       "      <th>Social support</th>\n",
       "      <th>Healthy life expectancy</th>\n",
       "      <th>Freedom to make life choices</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Country name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Finland</th>\n",
       "      <td>1.285190</td>\n",
       "      <td>1.499526</td>\n",
       "      <td>0.961271</td>\n",
       "      <td>0.662317</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Denmark</th>\n",
       "      <td>1.326949</td>\n",
       "      <td>1.503449</td>\n",
       "      <td>0.979333</td>\n",
       "      <td>0.665040</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Switzerland</th>\n",
       "      <td>1.390774</td>\n",
       "      <td>1.472403</td>\n",
       "      <td>1.040533</td>\n",
       "      <td>0.628954</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Iceland</th>\n",
       "      <td>1.326502</td>\n",
       "      <td>1.547567</td>\n",
       "      <td>1.000843</td>\n",
       "      <td>0.661981</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Norway</th>\n",
       "      <td>1.424207</td>\n",
       "      <td>1.495173</td>\n",
       "      <td>1.008072</td>\n",
       "      <td>0.670201</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Netherlands</th>\n",
       "      <td>1.338946</td>\n",
       "      <td>1.463646</td>\n",
       "      <td>0.975675</td>\n",
       "      <td>0.613626</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sweden</th>\n",
       "      <td>1.322235</td>\n",
       "      <td>1.433348</td>\n",
       "      <td>0.986470</td>\n",
       "      <td>0.650298</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>New Zealand</th>\n",
       "      <td>1.242318</td>\n",
       "      <td>1.487218</td>\n",
       "      <td>1.008138</td>\n",
       "      <td>0.646790</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Austria</th>\n",
       "      <td>1.317286</td>\n",
       "      <td>1.437445</td>\n",
       "      <td>1.000934</td>\n",
       "      <td>0.603369</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Luxembourg</th>\n",
       "      <td>1.536676</td>\n",
       "      <td>1.387528</td>\n",
       "      <td>0.986443</td>\n",
       "      <td>0.610137</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              GDP per capita  Social support  Healthy life expectancy  \\\n",
       "Country name                                                            \n",
       "Finland             1.285190        1.499526                 0.961271   \n",
       "Denmark             1.326949        1.503449                 0.979333   \n",
       "Switzerland         1.390774        1.472403                 1.040533   \n",
       "Iceland             1.326502        1.547567                 1.000843   \n",
       "Norway              1.424207        1.495173                 1.008072   \n",
       "Netherlands         1.338946        1.463646                 0.975675   \n",
       "Sweden              1.322235        1.433348                 0.986470   \n",
       "New Zealand         1.242318        1.487218                 1.008138   \n",
       "Austria             1.317286        1.437445                 1.000934   \n",
       "Luxembourg          1.536676        1.387528                 0.986443   \n",
       "\n",
       "              Freedom to make life choices  \n",
       "Country name                                \n",
       "Finland                           0.662317  \n",
       "Denmark                           0.665040  \n",
       "Switzerland                       0.628954  \n",
       "Iceland                           0.661981  \n",
       "Norway                            0.670201  \n",
       "Netherlands                       0.613626  \n",
       "Sweden                            0.650298  \n",
       "New Zealand                       0.646790  \n",
       "Austria                           0.603369  \n",
       "Luxembourg                        0.610137  "
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "whr.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Now we have two dataset, Coronavirus Data set and World Happiness Dataset. Let's Join them and do some interesting stuffs! "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's join corona_new and whr dataset using 'inner' method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Rate of Maximum Active Cases</th>\n",
       "      <th>GDP per capita</th>\n",
       "      <th>Social support</th>\n",
       "      <th>Healthy life expectancy</th>\n",
       "      <th>Freedom to make life choices</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Afghanistan</th>\n",
       "      <td>915.0</td>\n",
       "      <td>0.300706</td>\n",
       "      <td>0.356434</td>\n",
       "      <td>0.266052</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Albania</th>\n",
       "      <td>117.0</td>\n",
       "      <td>0.906653</td>\n",
       "      <td>0.830484</td>\n",
       "      <td>0.846330</td>\n",
       "      <td>0.461946</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Algeria</th>\n",
       "      <td>527.0</td>\n",
       "      <td>0.943856</td>\n",
       "      <td>1.143004</td>\n",
       "      <td>0.745419</td>\n",
       "      <td>0.083944</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Argentina</th>\n",
       "      <td>3663.0</td>\n",
       "      <td>1.028466</td>\n",
       "      <td>1.372544</td>\n",
       "      <td>0.849774</td>\n",
       "      <td>0.520840</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Armenia</th>\n",
       "      <td>771.0</td>\n",
       "      <td>0.808262</td>\n",
       "      <td>1.034577</td>\n",
       "      <td>0.775857</td>\n",
       "      <td>0.378076</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Rate of Maximum Active Cases  GDP per capita  Social support  \\\n",
       "Afghanistan                         915.0        0.300706        0.356434   \n",
       "Albania                             117.0        0.906653        0.830484   \n",
       "Algeria                             527.0        0.943856        1.143004   \n",
       "Argentina                          3663.0        1.028466        1.372544   \n",
       "Armenia                             771.0        0.808262        1.034577   \n",
       "\n",
       "             Healthy life expectancy  Freedom to make life choices  \n",
       "Afghanistan                 0.266052                      0.000000  \n",
       "Albania                     0.846330                      0.461946  \n",
       "Algeria                     0.745419                      0.083944  \n",
       "Argentina                   0.849774                      0.520840  \n",
       "Armenia                     0.775857                      0.378076  "
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_data=corona_new.join(whr,how=\"inner\") \n",
    "final_data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Now We have achieved a final dataset where we have rate of active cases and people's different "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Rate of Maximum Active Cases</th>\n",
       "      <th>GDP per capita</th>\n",
       "      <th>Social support</th>\n",
       "      <th>Healthy life expectancy</th>\n",
       "      <th>Freedom to make life choices</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Rate of Maximum Active Cases</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.149220</td>\n",
       "      <td>0.110963</td>\n",
       "      <td>0.129868</td>\n",
       "      <td>0.060913</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GDP per capita</th>\n",
       "      <td>0.149220</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.788877</td>\n",
       "      <td>0.858725</td>\n",
       "      <td>0.440761</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Social support</th>\n",
       "      <td>0.110963</td>\n",
       "      <td>0.788877</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.764977</td>\n",
       "      <td>0.486838</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Healthy life expectancy</th>\n",
       "      <td>0.129868</td>\n",
       "      <td>0.858725</td>\n",
       "      <td>0.764977</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.478732</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Freedom to make life choices</th>\n",
       "      <td>0.060913</td>\n",
       "      <td>0.440761</td>\n",
       "      <td>0.486838</td>\n",
       "      <td>0.478732</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              Rate of Maximum Active Cases  GDP per capita  \\\n",
       "Rate of Maximum Active Cases                      1.000000        0.149220   \n",
       "GDP per capita                                    0.149220        1.000000   \n",
       "Social support                                    0.110963        0.788877   \n",
       "Healthy life expectancy                           0.129868        0.858725   \n",
       "Freedom to make life choices                      0.060913        0.440761   \n",
       "\n",
       "                              Social support  Healthy life expectancy  \\\n",
       "Rate of Maximum Active Cases        0.110963                 0.129868   \n",
       "GDP per capita                      0.788877                 0.858725   \n",
       "Social support                      1.000000                 0.764977   \n",
       "Healthy life expectancy             0.764977                 1.000000   \n",
       "Freedom to make life choices        0.486838                 0.478732   \n",
       "\n",
       "                              Freedom to make life choices  \n",
       "Rate of Maximum Active Cases                      0.060913  \n",
       "GDP per capita                                    0.440761  \n",
       "Social support                                    0.486838  \n",
       "Healthy life expectancy                           0.478732  \n",
       "Freedom to make life choices                      1.000000  "
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_data.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Rate of Maximum Active Cases</th>\n",
       "      <th>GDP per capita</th>\n",
       "      <th>Social support</th>\n",
       "      <th>Healthy life expectancy</th>\n",
       "      <th>Freedom to make life choices</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Afghanistan</th>\n",
       "      <td>915.0</td>\n",
       "      <td>0.300706</td>\n",
       "      <td>0.356434</td>\n",
       "      <td>0.266052</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Albania</th>\n",
       "      <td>117.0</td>\n",
       "      <td>0.906653</td>\n",
       "      <td>0.830484</td>\n",
       "      <td>0.846330</td>\n",
       "      <td>0.461946</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Algeria</th>\n",
       "      <td>527.0</td>\n",
       "      <td>0.943856</td>\n",
       "      <td>1.143004</td>\n",
       "      <td>0.745419</td>\n",
       "      <td>0.083944</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Argentina</th>\n",
       "      <td>3663.0</td>\n",
       "      <td>1.028466</td>\n",
       "      <td>1.372544</td>\n",
       "      <td>0.849774</td>\n",
       "      <td>0.520840</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Armenia</th>\n",
       "      <td>771.0</td>\n",
       "      <td>0.808262</td>\n",
       "      <td>1.034577</td>\n",
       "      <td>0.775857</td>\n",
       "      <td>0.378076</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Rate of Maximum Active Cases  GDP per capita  Social support  \\\n",
       "Afghanistan                         915.0        0.300706        0.356434   \n",
       "Albania                             117.0        0.906653        0.830484   \n",
       "Algeria                             527.0        0.943856        1.143004   \n",
       "Argentina                          3663.0        1.028466        1.372544   \n",
       "Armenia                             771.0        0.808262        1.034577   \n",
       "\n",
       "             Healthy life expectancy  Freedom to make life choices  \n",
       "Afghanistan                 0.266052                      0.000000  \n",
       "Albania                     0.846330                      0.461946  \n",
       "Algeria                     0.745419                      0.083944  \n",
       "Argentina                   0.849774                      0.520840  \n",
       "Armenia                     0.775857                      0.378076  "
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Visualization of Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this we will Visualize the data between each life factors and coronavirus rate. And we will plot the linear regression line to see the correlation is positive or negative."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Plot 1: \"GDP per capita\" VS \"Rate of Active Coronavirus Cases\" "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x79d4311670>"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x= final_data[\"GDP per capita\"] \n",
    "y= final_data[\"Rate of Maximum Active Cases\"] \n",
    "sns.regplot(x, np.log(y)) \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Plot 2: \"Social Support\" VS \"Rate of Active Coronavirus Cases\" "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x79d4199220>"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x=final_data[\"Social support\"]\n",
    "y=final_data[\"Rate of Maximum Active Cases\"]\n",
    "sns.regplot(x, np.log(y))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Plot 3: \"Healthy life expectancy\"  VS \"\" Rate of Active Coronavirus Cases\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x79d41df370>"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x=final_data[\"Healthy life expectancy\"]\n",
    "y=final_data[\"Rate of Maximum Active Cases\"]\n",
    "sns.regplot(x, np.log(y))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Plot 4: \"Freedom to make life choices\" VS \"Rate of Active Coronavirus Cases\" "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x79d3fca970>"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x=final_data[\"Freedom to make life choices\"]\n",
    "y=final_data[\"Rate of Maximum Active Cases\"]\n",
    "sns.regplot(x, np.log(y))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "     "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Conclusion"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the above figure we can conclude that the developed countries where people are more happy are prone to coronavirus rather than underdeveloped countries. \n",
    "Now we can say that this is due to lack of testing held. There are some countries where testing were less and there are countries where done on high scale. This can create somewhat bais in our Analysis but the core Analysis is that Life factors and Coronavirus Cases are positivity related to each other. \n",
    "\n",
    "Let’s do better Analysis. Now we will compare the death data sets with the World Happiness Report and see is there any relationship between deaths and life factors? \n",
    "This is clear our picture!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Working with Coronavirus Death Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Province/State</th>\n",
       "      <th>Country/Region</th>\n",
       "      <th>1/22/20</th>\n",
       "      <th>1/23/20</th>\n",
       "      <th>1/24/20</th>\n",
       "      <th>1/25/20</th>\n",
       "      <th>1/26/20</th>\n",
       "      <th>1/27/20</th>\n",
       "      <th>1/28/20</th>\n",
       "      <th>1/29/20</th>\n",
       "      <th>...</th>\n",
       "      <th>7/5/20</th>\n",
       "      <th>7/6/20</th>\n",
       "      <th>7/7/20</th>\n",
       "      <th>7/8/20</th>\n",
       "      <th>7/9/20</th>\n",
       "      <th>7/10/20</th>\n",
       "      <th>7/11/20</th>\n",
       "      <th>7/12/20</th>\n",
       "      <th>7/13/20</th>\n",
       "      <th>7/14/20</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>864</td>\n",
       "      <td>898</td>\n",
       "      <td>920</td>\n",
       "      <td>936</td>\n",
       "      <td>957</td>\n",
       "      <td>971</td>\n",
       "      <td>994</td>\n",
       "      <td>1010</td>\n",
       "      <td>1012</td>\n",
       "      <td>1048</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Albania</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>76</td>\n",
       "      <td>79</td>\n",
       "      <td>81</td>\n",
       "      <td>83</td>\n",
       "      <td>83</td>\n",
       "      <td>85</td>\n",
       "      <td>89</td>\n",
       "      <td>93</td>\n",
       "      <td>95</td>\n",
       "      <td>97</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Algeria</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>952</td>\n",
       "      <td>959</td>\n",
       "      <td>968</td>\n",
       "      <td>978</td>\n",
       "      <td>988</td>\n",
       "      <td>996</td>\n",
       "      <td>1004</td>\n",
       "      <td>1011</td>\n",
       "      <td>1018</td>\n",
       "      <td>1028</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Andorra</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>52</td>\n",
       "      <td>52</td>\n",
       "      <td>52</td>\n",
       "      <td>52</td>\n",
       "      <td>52</td>\n",
       "      <td>52</td>\n",
       "      <td>52</td>\n",
       "      <td>52</td>\n",
       "      <td>52</td>\n",
       "      <td>52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Angola</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>19</td>\n",
       "      <td>19</td>\n",
       "      <td>21</td>\n",
       "      <td>21</td>\n",
       "      <td>22</td>\n",
       "      <td>23</td>\n",
       "      <td>23</td>\n",
       "      <td>26</td>\n",
       "      <td>26</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 177 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  Province/State Country/Region  1/22/20  1/23/20  1/24/20  1/25/20  1/26/20  \\\n",
       "0            NaN    Afghanistan        0        0        0        0        0   \n",
       "1            NaN        Albania        0        0        0        0        0   \n",
       "2            NaN        Algeria        0        0        0        0        0   \n",
       "3            NaN        Andorra        0        0        0        0        0   \n",
       "4            NaN         Angola        0        0        0        0        0   \n",
       "\n",
       "   1/27/20  1/28/20  1/29/20  ...  7/5/20  7/6/20  7/7/20  7/8/20  7/9/20  \\\n",
       "0        0        0        0  ...     864     898     920     936     957   \n",
       "1        0        0        0  ...      76      79      81      83      83   \n",
       "2        0        0        0  ...     952     959     968     978     988   \n",
       "3        0        0        0  ...      52      52      52      52      52   \n",
       "4        0        0        0  ...      19      19      21      21      22   \n",
       "\n",
       "   7/10/20  7/11/20  7/12/20  7/13/20  7/14/20  \n",
       "0      971      994     1010     1012     1048  \n",
       "1       85       89       93       95       97  \n",
       "2      996     1004     1011     1018     1028  \n",
       "3       52       52       52       52       52  \n",
       "4       23       23       26       26       26  \n",
       "\n",
       "[5 rows x 177 columns]"
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corona_death=pd.read_csv(\"Covid 19 Datasets/datasets_covid_19_deaths.csv\") \n",
    "corona_death.drop(['Lat','Long'],axis=1,inplace=True)\n",
    "corona_death.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [],
   "source": [
    "death_clean=corona_death.groupby(\"Country/Region\").sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x79ce0da640>"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "death_clean.loc['India'].plot()\n",
    "death_clean.loc['US'].plot()\n",
    "death_clean.loc['China'].plot()\n",
    "plt.legend()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x79cc719ca0>"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "death_clean.loc['India'].diff().plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1/22/20</th>\n",
       "      <th>1/23/20</th>\n",
       "      <th>1/24/20</th>\n",
       "      <th>1/25/20</th>\n",
       "      <th>1/26/20</th>\n",
       "      <th>1/27/20</th>\n",
       "      <th>1/28/20</th>\n",
       "      <th>1/29/20</th>\n",
       "      <th>1/30/20</th>\n",
       "      <th>1/31/20</th>\n",
       "      <th>...</th>\n",
       "      <th>7/6/20</th>\n",
       "      <th>7/7/20</th>\n",
       "      <th>7/8/20</th>\n",
       "      <th>7/9/20</th>\n",
       "      <th>7/10/20</th>\n",
       "      <th>7/11/20</th>\n",
       "      <th>7/12/20</th>\n",
       "      <th>7/13/20</th>\n",
       "      <th>7/14/20</th>\n",
       "      <th>Death Rate</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Country/Region</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Afghanistan</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>898</td>\n",
       "      <td>920</td>\n",
       "      <td>936</td>\n",
       "      <td>957</td>\n",
       "      <td>971</td>\n",
       "      <td>994</td>\n",
       "      <td>1010</td>\n",
       "      <td>1012</td>\n",
       "      <td>1048</td>\n",
       "      <td>42.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Albania</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>79</td>\n",
       "      <td>81</td>\n",
       "      <td>83</td>\n",
       "      <td>83</td>\n",
       "      <td>85</td>\n",
       "      <td>89</td>\n",
       "      <td>93</td>\n",
       "      <td>95</td>\n",
       "      <td>97</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Algeria</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>959</td>\n",
       "      <td>968</td>\n",
       "      <td>978</td>\n",
       "      <td>988</td>\n",
       "      <td>996</td>\n",
       "      <td>1004</td>\n",
       "      <td>1011</td>\n",
       "      <td>1018</td>\n",
       "      <td>1028</td>\n",
       "      <td>30.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Andorra</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>52</td>\n",
       "      <td>52</td>\n",
       "      <td>52</td>\n",
       "      <td>52</td>\n",
       "      <td>52</td>\n",
       "      <td>52</td>\n",
       "      <td>52</td>\n",
       "      <td>52</td>\n",
       "      <td>52</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Angola</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>19</td>\n",
       "      <td>21</td>\n",
       "      <td>21</td>\n",
       "      <td>22</td>\n",
       "      <td>23</td>\n",
       "      <td>23</td>\n",
       "      <td>26</td>\n",
       "      <td>26</td>\n",
       "      <td>26</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 176 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                1/22/20  1/23/20  1/24/20  1/25/20  1/26/20  1/27/20  1/28/20  \\\n",
       "Country/Region                                                                  \n",
       "Afghanistan           0        0        0        0        0        0        0   \n",
       "Albania               0        0        0        0        0        0        0   \n",
       "Algeria               0        0        0        0        0        0        0   \n",
       "Andorra               0        0        0        0        0        0        0   \n",
       "Angola                0        0        0        0        0        0        0   \n",
       "\n",
       "                1/29/20  1/30/20  1/31/20  ...  7/6/20  7/7/20  7/8/20  \\\n",
       "Country/Region                             ...                           \n",
       "Afghanistan           0        0        0  ...     898     920     936   \n",
       "Albania               0        0        0  ...      79      81      83   \n",
       "Algeria               0        0        0  ...     959     968     978   \n",
       "Andorra               0        0        0  ...      52      52      52   \n",
       "Angola                0        0        0  ...      19      21      21   \n",
       "\n",
       "                7/9/20  7/10/20  7/11/20  7/12/20  7/13/20  7/14/20  \\\n",
       "Country/Region                                                        \n",
       "Afghanistan        957      971      994     1010     1012     1048   \n",
       "Albania             83       85       89       93       95       97   \n",
       "Algeria            988      996     1004     1011     1018     1028   \n",
       "Andorra             52       52       52       52       52       52   \n",
       "Angola              22       23       23       26       26       26   \n",
       "\n",
       "                Death Rate  \n",
       "Country/Region              \n",
       "Afghanistan           42.0  \n",
       "Albania                4.0  \n",
       "Algeria               30.0  \n",
       "Andorra                4.0  \n",
       "Angola                 3.0  \n",
       "\n",
       "[5 rows x 176 columns]"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "death_rates= []\n",
    "for country in countries :\n",
    "    death_rates.append(death_clean.loc[country].diff().max())\n",
    "death_clean['Death Rate'] = death_rates\n",
    "death_clean.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Death Rate</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Country/Region</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Afghanistan</th>\n",
       "      <td>42.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Albania</th>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Algeria</th>\n",
       "      <td>30.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Andorra</th>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Angola</th>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                Death Rate\n",
       "Country/Region            \n",
       "Afghanistan           42.0\n",
       "Albania                4.0\n",
       "Algeria               30.0\n",
       "Andorra                4.0\n",
       "Angola                 3.0"
      ]
     },
     "execution_count": 148,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "death_data= pd.DataFrame(death_clean['Death Rate'])\n",
    "death_data.head()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Finally we have Death Data. Now we can compare the same with World Happiness Report. \n",
    "Below is the Regression plot between Death Rate and World Happiness Report"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Death Rate</th>\n",
       "      <th>GDP per capita</th>\n",
       "      <th>Social support</th>\n",
       "      <th>Healthy life expectancy</th>\n",
       "      <th>Freedom to make life choices</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Afghanistan</th>\n",
       "      <td>42.0</td>\n",
       "      <td>0.300706</td>\n",
       "      <td>0.356434</td>\n",
       "      <td>0.266052</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Albania</th>\n",
       "      <td>4.0</td>\n",
       "      <td>0.906653</td>\n",
       "      <td>0.830484</td>\n",
       "      <td>0.846330</td>\n",
       "      <td>0.461946</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Algeria</th>\n",
       "      <td>30.0</td>\n",
       "      <td>0.943856</td>\n",
       "      <td>1.143004</td>\n",
       "      <td>0.745419</td>\n",
       "      <td>0.083944</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Argentina</th>\n",
       "      <td>75.0</td>\n",
       "      <td>1.028466</td>\n",
       "      <td>1.372544</td>\n",
       "      <td>0.849774</td>\n",
       "      <td>0.520840</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Armenia</th>\n",
       "      <td>19.0</td>\n",
       "      <td>0.808262</td>\n",
       "      <td>1.034577</td>\n",
       "      <td>0.775857</td>\n",
       "      <td>0.378076</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Australia</th>\n",
       "      <td>8.0</td>\n",
       "      <td>1.310396</td>\n",
       "      <td>1.477146</td>\n",
       "      <td>1.022608</td>\n",
       "      <td>0.621877</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Austria</th>\n",
       "      <td>30.0</td>\n",
       "      <td>1.317286</td>\n",
       "      <td>1.437445</td>\n",
       "      <td>1.000934</td>\n",
       "      <td>0.603369</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Azerbaijan</th>\n",
       "      <td>10.0</td>\n",
       "      <td>0.990273</td>\n",
       "      <td>1.180613</td>\n",
       "      <td>0.731134</td>\n",
       "      <td>0.467735</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bahrain</th>\n",
       "      <td>6.0</td>\n",
       "      <td>1.296692</td>\n",
       "      <td>1.315324</td>\n",
       "      <td>0.838836</td>\n",
       "      <td>0.610400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bangladesh</th>\n",
       "      <td>64.0</td>\n",
       "      <td>0.556156</td>\n",
       "      <td>0.868801</td>\n",
       "      <td>0.694941</td>\n",
       "      <td>0.604131</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Death Rate  GDP per capita  Social support  \\\n",
       "Afghanistan        42.0        0.300706        0.356434   \n",
       "Albania             4.0        0.906653        0.830484   \n",
       "Algeria            30.0        0.943856        1.143004   \n",
       "Argentina          75.0        1.028466        1.372544   \n",
       "Armenia            19.0        0.808262        1.034577   \n",
       "Australia           8.0        1.310396        1.477146   \n",
       "Austria            30.0        1.317286        1.437445   \n",
       "Azerbaijan         10.0        0.990273        1.180613   \n",
       "Bahrain             6.0        1.296692        1.315324   \n",
       "Bangladesh         64.0        0.556156        0.868801   \n",
       "\n",
       "             Healthy life expectancy  Freedom to make life choices  \n",
       "Afghanistan                 0.266052                      0.000000  \n",
       "Albania                     0.846330                      0.461946  \n",
       "Algeria                     0.745419                      0.083944  \n",
       "Argentina                   0.849774                      0.520840  \n",
       "Armenia                     0.775857                      0.378076  \n",
       "Australia                   1.022608                      0.621877  \n",
       "Austria                     1.000934                      0.603369  \n",
       "Azerbaijan                  0.731134                      0.467735  \n",
       "Bahrain                     0.838836                      0.610400  \n",
       "Bangladesh                  0.694941                      0.604131  "
      ]
     },
     "execution_count": 205,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_data2 = death_data.join(whr, how=(\"inner\")) \n",
    "final_data2.head(10)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Visualization of Death Rate and World Happiness Report"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "GPD per capita VS Death Rate Plot\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x79ca73ea00>"
      ]
     },
     "execution_count": 203,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(\"GPD per capita VS Death Rate Plot\") \n",
    "\n",
    "sns.lmplot(x= \"GDP per capita\" , y=\"Death Rate\", data=final_data2) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Healthy life expectancy VS Death Rate Plot\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x79ca7124f0>"
      ]
     },
     "execution_count": 204,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(\"Healthy life expectancy VS Death Rate Plot\") \n",
    "\n",
    "sns.lmplot(x= \"Healthy life expectancy\" , y=\"Death Rate\", data=final_data2) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Social support VS Death Rate Plot\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x79ca7c4b20>"
      ]
     },
     "execution_count": 206,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(\"Social support VS Death Rate Plot\") \n",
    "\n",
    "sns.lmplot(x= \"Social support\" , y=\"Death Rate\", data=final_data2) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Freedom to make life choices VS Death Rate Plot\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x79ca63e3d0>"
      ]
     },
     "execution_count": 207,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(\"Freedom to make life choices VS Death Rate Plot\") \n",
    "\n",
    "sns.lmplot(x= \"Freedom to make life choices\" , y=\"Death Rate\", data=final_data2) \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Final Conclusion"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Based on the above Analysis we can conclude that\n",
    " - Relationalship between Developed Country and Coronavirus Cases are linear and positive\n",
    " - Relationalship between Developed Countries and Death Cases are positive but not that linear\n",
    "\n",
    "Thus from first point it is clear that Developed countries are more prone to Coronavirus Disease. The countries with high social support rate and high life expectancy shows high number of active coronavirus cases. It is strange but this concludes that people with high life expectancy have high chances of getting coronavirus disease\n",
    "\n",
    "But the picture just turn around if we see the second analysis. Death rate is somewhat linear but it doesn't show that much positive correlation between Developed countries. This concludes that no matter country is developed or not, life expectancy in that country is high or low, the death rate due to coronavirus is linear and somewhat constant.\n",
    "\n",
    "Now you may be thinking that why this bais? Well the main cause can be testing. It may happen that developed countries have performed more testing and in result they got high number of active cases whereas underdeveloped countries perform less number of Coronavirus testing and in result got less number of active cases. Therefore to conclude overall we should consider Death Cases as well as Active Cases for a particular Country with respect to Life Factors for that country.\n",
    "\n",
    "I hope you have got some useful insights from this analysis. I will perform the same analysis for Recovered Cases VS World Happiness Report (Life Factors) in which we will answer the questions like\n",
    " - Does developed countries have high recovery rate?\n",
    " - Does high life expectancy of a person can lead to increase in recovered cases?\n",
    " - Does social support helps to get high recovery rate?\n",
    "And more.\n",
    "\n",
    "Thank you for learning!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
